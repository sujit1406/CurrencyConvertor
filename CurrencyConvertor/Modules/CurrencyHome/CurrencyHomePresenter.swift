//
//  CurrencyHomePresenter.swift
//  CurrencyConvertor
//
//  Created by Sujith Antony on 25/10/2020.
//  Copyright (c) 2020 Sujith Antony. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import Foundation
import Alamofire

final class CurrencyHomePresenter {
    
    // MARK: - Private properties -
    
    private unowned let view: CurrencyHomeViewInterface
    private let interactor: CurrencyHomeInteractorInterface
    private let wireframe: CurrencyHomeWireframeInterface
    var timer:Timer?
    
    // MARK: - Lifecycle -
    
    init(view: CurrencyHomeViewInterface, interactor: CurrencyHomeInteractorInterface, wireframe: CurrencyHomeWireframeInterface) {
        self.view = view
        self.interactor = interactor
        self.wireframe = wireframe
        timer = Timer.scheduledTimer(withTimeInterval: 30*60, repeats: true) { [weak self] (timer) in
            self?.fetchLiveData(source: CurrencyManager.shared.sourceCurrency?.currencySymbol, completion: {
                print("rates updated from timer")
            })
        }
    }
}

// MARK: - Extensions -

extension CurrencyHomePresenter: CurrencyHomePresenterInterface {
    func loadCurrencyList(completion: @escaping () -> Void) {
        interactor.getCurrenciesList { [completion] response in
            CurrencyManager.shared.currencies =  response.currencies.map{Currency(name: $0.value, symbol: $0.key)}
            print("received and currencies updated : \(CurrencyManager.shared.currencies)")
            completion()
        }
    }
    
    func fetchLiveData(source:String?, completion: @escaping () -> Void) {
        interactor.getLiveData(source: source) { [completion] result in
            print("received and rates updated : \(result.rates)")
            CurrencyManager.shared.exchangeRates = result.rates
            completion()
        }
    }
    
    func didSelectSourceCurrency() {
        //wireframe._openList(type: .source)
    }
    
    func didSelectDestinationCurrency() {
        wireframe._openList(type: .destination)
    }
    
    func didSelectAmount() {
        
    }
    
    func convert() -> String {
        guard let sourceCurrency = CurrencyManager.shared.sourceCurrency?.symbol, let destinationCurrency = CurrencyManager.shared.destinationCurrency?.symbol else {
            return "ERROR"
        }
        let amount = String(CurrencyManager.shared.amount ?? 0)
        let result =
            interactor.convert(from: sourceCurrency, to: destinationCurrency, amount: amount)
        print("from \(sourceCurrency) to \(destinationCurrency) amount:\(amount)")
        print("converted amount : \(result)")
        return result
    }
    
}
